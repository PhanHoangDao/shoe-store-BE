<div class="app-content content">
    <div class="content-wrapper">
        <div class="content-wrapper-before"></div>
        <div class="content-header row">
            <div class="content-header-left col-md-4 col-12 mb-2">
            <h3 class="content-header-title">Product</h3>
            </div>
            <div class="content-header-right col-md-8 col-12">
            <div class="breadcrumbs-top float-md-right">
                <div class="breadcrumb-wrapper mr-1">
                <ol class="breadcrumb">
                    {{!-- must automation this link --}}
                    <li class="breadcrumb-item"><a href="/admin">Home</a>
                    </li>
                    <li class="breadcrumb-item"><a href="/admin/product">Product</a>
                    </li>
                    <li class="breadcrumb-item active">Update Product
                    </li>
                </ol>
                </div>
            </div>
            </div>
        </div>
        <div class="content-body">
            <div class="row">
                <div class="col-12">
                    <form method="POST" action="/admin/product/saveUpdate/{{result._id}}?_method=PUT" id="product-update-form" enctype='multipart/form-data'>
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Update Product</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                        <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                        <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                                        <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                        <li><a data-action="close"><i class="ft-x"></i></a></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="card-content collapse show">
                                <div style="margin: 0 20px">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Name</label>
                                        <input type="text" class="form-control" name="name" placeholder="Enter shoeName" value="{{result.name}}">
                                    </div>

                                    {{!-- Get Cate Of Product Assigned And All CateType added --}}
                                    {{#if listAnotherCate}}
                                        {{getCategoryAssigned listAnotherCateAdded listAnotherCate listCateType}}
                                    {{/if}}

                                    <div class="form-group" style="display: flex; flex-direction: column">
                                        <label for="exampleInputEmail1">Introduce of product</label>
                                        <textarea name="introduce" placeholder="Enter introduce for Shoe">{{result.introduce}}</textarea>
                                    </div>
                                    <div class="form-group" style="display: flex; flex-direction: column">
                                        <label for="exampleInputPassword1">Description</label>
                                        <textarea name="description" placeholder="Enter description for Shoe">{{result.description}}</textarea>
                                    </div>
                                    <div class="form-group">
                                        <label for="exampleInputPassword1">Gender</label>
                                        <select name="gender" class="form-control">
                                            <option value="male"
                                                {{#when result.gender 'eq' 'male'}}
                                                    selected
                                                {{/when}}
                                            >Male</option>
                                            <option value="female"
                                                {{#when result.gender 'eq' 'female'}}
                                                    selected
                                                {{/when}}
                                            >Female</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {{!-- List to choose to render color of product --}}
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Choose Color</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                        <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                        <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                                        <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                        <li><a data-action="close"><i class="ft-x"></i></a></li>
                                    </ul>
                                </div>
                            </div>

                            {{!-- Selected Color --}}
                            <div class="card-content collapse show">
                                <div class="cart-body">
                                    <div style="margin: 0 20px;">
                                        <div class="form-group">
                                            <select class="select2 form-control" id="color-select" multiple style="margin-bottom: 20px" onchange="handleColorSelectedChange(event)">
                                                {{{getColorAssigned listColor listColorInfo}}}
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {{!-- Image And Size --}}
                        <div id="render-color-selected">
                            {{#each listColorInfo}}
                                <div class="card">
                                    <div class="card-header">
                                        <h4 class="card-title">{{this.colorName}}</h4>
                                        <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                        <div class="heading-elements">
                                            <ul class="list-inline mb-0">
                                                <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                                <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                                                <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                                <li class="close-component-{{this.colorName}}"><a data-action="close"><i class="ft-x"></i></a></li>
                                            </ul>
                                        </div>
                                    </div>

                                    <div class="card-content collapse show" style="margin: 0 20px;">
                                        <div id="imageFields{{this.colorName}}">                                    
                                            <div class="form-group imageField{{this.colorName}}">
                                                <label for="exampleInputPassword1">Image Avatar</label>
                                                <input type="file" class="form-control imageWithColor{{this.colorName}}" name="image" placeholder="Select image" accept='image/*' value="{{this.avatar}}" onclick="displayImg{{this.colorName}}(0)">
                                                <img class="imgEdit" name="imageChange{{this.colorName}}" src="/uploadWithRefactorDB/{{this.avatar}}" alt="Images of product" style="width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;">
                                                <input type="hidden" value="{{this.avatar}}" name="avatar{{this.colorName}}">
                                            </div>
                                            <div class="form-group imageField{{this.colorName}}">
                                                <label for="exampleInputPassword1">Images Details</label>
                                                <input type="file" class="form-control imageWithColor{{this.colorName}}" name="image" placeholder="Select image" accept='image/*' value="{{this.listImgByColor}}" onclick="displayImg{{this.colorName}}(1)" multiple>
                                                <input type="hidden" value="{{this.listImgByColor}}" name="arrImg{{this.colorName}}">
                                                {{#each this.listImgByColor}}
                                                    <div class="image-element-{{../this.colorName}}" style="position: relative;">
                                                        <img src="/uploadWithRefactorDB/{{this}}" style="width: 25%; max-height: 310px; margin: 0.5% 37.5%; min-height: 105px; min-width: 10%; opacity: 1;">
                                                        <input type="hidden" value="{{this}}" name="imageName{{../this.colorName}}">
                                                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0; transition: opacity 0.3s ease 0s; cursor: pointer;">
                                                            <i class="fa ft-trash" style="font-size: 20px; color: white;" onclick="deleteImage(event)"></i>
                                                        </div>
                                                    </div>
                                                {{/each}}
                                            </div>
                                        </div>
                                        {{!-- Size and price of each size and color --}}
                                        <div class="form-group">
                                            <label for="exampleInputPassword1">Sizes in US/UK (Enter the amount of the shoes)</label>
                                            {{{getSizeInfo ../listSizeAdded this}}}
                                        </div> 
                                    </div>
                                </div>
                            {{/each}}
                        </div>
                        <button type="submit" class="btn btn-primary" id="btnUpdate">Update</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    // list color with image and all elements of it
    let listColor = {{{json listColor}}};
    let product = {{{json result}}};
    let listColorSelected = [];

    // list to render color
    let listRenderSelectedColor = document.getElementById("render-color-selected");

    // init function for color selected
    const selectedElements = document.getElementById('color-select');
    let selectedValues = Array.from(selectedElements.selectedOptions, option => option.value); 
    listColor.forEach((color) => {
        if(selectedValues.find((colorSelected) => colorSelected === color.cateId)) {
            // init function
            listColorSelected.push(color.cateId);

            window["imageField" + color.cateName] = document.getElementsByClassName(`imageField${color.cateName}`);

            // function to display image when update or add
            const displayName = `displayImg${color.cateName}`;
            window[displayName] = new Function(`
                return function ${displayName}(position) {
                    window["selectedFile${color.cateName}"] = document.getElementsByClassName("imageWithColor${color.cateName}");

                    window["selectedFile${color.cateName}"][position].addEventListener('change', (event) => {
                        if(position === 0) {
                            let srcImage = document.getElementsByName("imageChange${color.cateName}");
                            // display new image when have update (avatar).
                            srcImage[position].src = URL.createObjectURL(event.target.files[0]);
                            srcImage[position].onload = function() {
                                URL.revokeObjectURL(srcImage[position].src) // free memory
                            }
                            srcImage[position].style = "width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;";
                            // assign value for input avatar
                            let inputAvatar = document.getElementsByName("avatar${color.cateName}");
                            inputAvatar[0].value = event.target.files[0].name;
                            return;
                        }
                        
                        // display new image when have update (image detail).
                        Array.from(event.target.files).forEach((file) => {
                            // add value of image to array image
                            const hiddenInput = document.getElementsByName("arrImg${color.cateName}");
                            let arrImg = hiddenInput[0].value.split(',');
                            arrImg.push(file.name);
                            hiddenInput[0].value = arrImg;

                            let img = document.createElement('img');
                            let input = document.createElement('input');
                            let div = document.createElement('div');

                            // CSS for div element image
                            div.style="position: relative";
                            div.className="image-element-${color.cateName}";

                            // delete icon 
                            let divDeleteIcon = document.createElement('div');
                            divDeleteIcon.style = 'position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0; transition: opacity 0.3s ease; cursor: pointer;';
                            let trashIcon = document.createElement('i');
                            trashIcon.className = 'fa ft-trash';
                            trashIcon.style="font-size: 20px; color: white";

                            // event to delete image element
                            trashIcon.addEventListener('click', deleteImage);
                            divDeleteIcon.appendChild(trashIcon);

                            div.appendChild(img);
                            div.appendChild(input);
                            div.appendChild(divDeleteIcon);

                            // set attribute for tag input
                            input.setAttribute('type', 'hidden');
                            input.setAttribute('value', file.name);
                            // set avatar or list image for shoe
                            input.setAttribute('name', 'imageName${color.cateName}');

                            // Set attributes for tag image
                            img.src = URL.createObjectURL(file);
                            img.style = "width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;";

                            // event hover
                            div.addEventListener('mouseenter', function() {
                                divDeleteIcon.style.opacity = '1';
                                img.style.opacity = '0.5';
                            })
                            div.addEventListener('mouseleave', function() {
                                divDeleteIcon.style.opacity = '0';
                                img.style.opacity = '1';
                            })
                            
                            // Append the img element to the image container
                            window["imageField${color.cateName}"][position].appendChild(div);

                            // free memory
                            img.onload = function() {
                                URL.revokeObjectURL(img.src);
                            }
                        });
                    }); 
                }`)();

            // init hover function for image
            let divElements = document.querySelectorAll(`.image-element-${color.cateName}`);
            divElements.forEach((div) => {
                let imgElement = div.querySelector('img');
                let deleteIcon = div.querySelector('div');

                div.addEventListener('mouseenter', function() {
                    deleteIcon.style.opacity = '1';
                    imgElement.style.opacity = '0.5';
                });

                div.addEventListener('mouseleave', function() {
                    deleteIcon.style.opacity = '0';
                    imgElement.style.opacity = '1';
                });
            })

            // init delete component Color
            let iconDeleteComponents = document.querySelectorAll(`.close-component-${color.cateName}`);
            iconDeleteComponents.forEach((icon) => {
                icon.addEventListener('click', (event) => {
                    deleteComponentColor(event, color.cateId);
                })
            })
        }
    });

    // add color-id attribute to div card
    const divCards = listRenderSelectedColor.getElementsByClassName('card');
    let i = 0;

    listColorSelected.forEach((color) => {
        divCards[i].setAttribute("color-id", color);
        i++;
        if(i==listColorSelected.length - 1) {
            return;
        }
    });

    // on change color selected
    function handleColorSelectedChange(event) {
        let selectElement = document.getElementById('color-select');
        let selectedColors = [], option, elements;
        
        for (let i = 0; i < selectElement.options.length; i++) {
            option = selectElement.options[i];
            if (!option.selected || listColorSelected.find((color) => color === option.value)) {
                continue;
            }
            
            listColorSelected.push(option.value);

            listColor.forEach(color => {
                if(color.cateId === option.value) {
                    listRenderSelectedColor.insertAdjacentHTML("beforeend", 
                        `<div class="card" color-id="${color.cateId}">
                            <div class="card-header">
                                <h4 class="card-title">${color.cateName}</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                        <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                        <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                                        <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                        <li><a data-action="close" onclick="deleteComponentColor(event, '${color.cateId}')"><i class="ft-x"></i></a></li>
                                    </ul>
                                </div>
                            </div>

                            <div class="card-content collapse show" style="margin: 0 20px;">
                                <div id="imageFields${color.cateName}">                                    
                                    <div class="form-group imageField${color.cateName}">
                                        <label for="exampleInputPassword1">Image Avatar</label>
                                        <input type="file" class="form-control imageWithColor${color.cateName}" name="image" placeholder="Select image" accept='image/*' value="0" onclick="displayImg${color.cateName}(0)">
                                        <img class="imgEdit" name="imageChange${color.cateName}" src="" alt="Images of product" style="width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%; display: none">
                                        <input type="hidden" value="" name="avatar${color.cateName}">
                                    </div>
                                    <div class="form-group imageField${color.cateName}">
                                        <label for="exampleInputPassword1">Images Details</label>
                                        <input type="file" class="form-control imageWithColor${color.cateName}" name="image" id="image" value="1" onclick="displayImg${color.cateName}(1)" multiple>
                                        <input type="hidden" value="" name="arrImg${color.cateName}">
                                    </div>
                                </div>

                                {{!-- Size and price of each size and color --}}
                                <div class="form-group">
                                    <label for="exampleInputPassword1">Sizes in US/UK (Enter the amount of the shoes)</label>
                                    {{#each listSizeAdded}}
                                        <div class ="form-check" style="margin-bottom: 14px">
                                            <input value="{{this.cateId}}" name="size${color.cateId}" type="hidden">
                                            <label class="form-check-label" for="flexCheckDefault" style="margin-right: 50px; min-width: 30px">
                                                {{this.cateName}}
                                            </label>
                                            <input type="number" name="amountOfSize${color.cateId}" placeholder="Enter amount of this size" value="0" min="0">
                                            <label class="form-check-label" for="flexCheckDefault" style="margin-right: 10px; margin-left: 20px; min-width: 30px">Price</label>
                                            <input type="number" name="price${color.cateId}" placeholder="Enter price of this size" value="0" min="0">
                                        </div> 
                                    {{/each}}
                                </div> 
                            </div>
                        </div>`
                    );

                    window["imageField" + color.cateName] = document.getElementsByClassName(`imageField${color.cateName}`);

                    // function to display image when update or add
                    const displayName = `displayImg${color.cateName}`;
                    window[displayName] = new Function(`
                        return function ${displayName}(position) {
                            window["selectedFile${color.cateName}"] = document.getElementsByClassName("imageWithColor${color.cateName}");

                            window["selectedFile${color.cateName}"][position].addEventListener('change', (event) => {
                                if(position === 0) {
                                    let srcImage = document.getElementsByName("imageChange${color.cateName}");
                                    // display new image when have update (avatar).
                                    srcImage[position].src = URL.createObjectURL(event.target.files[0]);
                                    srcImage[position].onload = function() {
                                        URL.revokeObjectURL(srcImage[position].src) // free memory
                                    }
                                    srcImage[position].style = "width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;";
                                    // assign value for input avatar
                                    let inputAvatar = document.getElementsByName("avatar${color.cateName}");
                                    inputAvatar[0].value = event.target.files[0].name;
                                    return;
                                }
                                
                                // reset image element 
                                let elements = document.querySelectorAll(".image-element-${color.cateName}");
                                elements?.forEach(function(element) {
                                    element.remove();
                                });
                                
                                // display new image when have update (image detail).
                                Array.from(event.target.files).forEach((file) => {
                                    // add value of image to array image
                                    const hiddenInput = document.getElementsByName("arrImg${color.cateName}");
                                    let arrImg = hiddenInput[0].value.split(',');
                                    arrImg.push(file.name);
                                    hiddenInput[0].value = arrImg;

                                    let img = document.createElement('img');
                                    let input = document.createElement('input');
                                    let div = document.createElement('div');

                                    // CSS for div element image
                                    div.style="position: relative";
                                    div.className="image-element-${color.cateName}";

                                    // delete icon 
                                    let divDeleteIcon = document.createElement('div');
                                    divDeleteIcon.style = 'position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0; transition: opacity 0.3s ease; cursor: pointer;';
                                    let trashIcon = document.createElement('i');
                                    trashIcon.className = 'fa ft-trash';
                                    trashIcon.style="font-size: 20px; color: white";

                                    // event to delete image element
                                    trashIcon.addEventListener('click', deleteImage);
                                    divDeleteIcon.appendChild(trashIcon);

                                    div.appendChild(img);
                                    div.appendChild(input);
                                    div.appendChild(divDeleteIcon);

                                    // set attribute for tag input
                                    input.setAttribute('type', 'hidden');
                                    input.setAttribute('value', file.name);
                                    // set avatar or list image for shoe
                                    input.setAttribute('name', 'imageName${color.cateName}');
  
                                    // Set attributes for tag image
                                    img.src = URL.createObjectURL(file);
                                    img.style = "width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;";

                                    // event hover
                                    div.addEventListener('mouseenter', function() {
                                        divDeleteIcon.style.opacity = '1';
                                        img.style.opacity = '0.5';
                                    })
                                    div.addEventListener('mouseleave', function() {
                                        divDeleteIcon.style.opacity = '0';
                                        img.style.opacity = '1';
                                    })
                                    
                                    // Append the img element to the image container
                                    window["imageField${color.cateName}"][position].appendChild(div);

                                    // free memory
                                    img.onload = function() {
                                        URL.revokeObjectURL(img.src);
                                    }
                                });
                            }); 
                        }`)();
                }
            });
        }

        // delete it in list Selected color to render
        const selectedValues = Array.from(event.target.selectedOptions, option => option.value);
        listColorSelected.forEach((color) => {
            if(!selectedValues.includes(color)) {
                let index = listColorSelected.indexOf(color);
                listColorSelected.splice(index, 1);

                let elementToDelete = document.querySelector(`[color-id="${color}"]`);
                if(elementToDelete) {
                    elementToDelete.remove();
                }
            }
        })
    }

    let listDeleteImg = [];

    function deleteImage(event) {
        // image element
        let imageElement = event.target.parentNode.parentNode;
        let imgDelete = imageElement.querySelector("input");

        const hiddenInput = imageElement.parentNode.querySelector('input[type="hidden"]');
        let arrImg = hiddenInput.value.split(',');

        // add to array listDelete
        let imageDelete = arrImg.find((img) => img === imgDelete.value);
        listDeleteImg.push(imageDelete);

        // delete this value of image just delete in array image and assign value again for it
        arrImg = arrImg.filter((img) => img !== imgDelete.value);
        hiddenInput.value = arrImg;

        // remove on interface
        imageElement.parentNode.removeChild(imageElement);
    }

    function deleteComponentColor(event, colorId) {
        let componentColor = event.target.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
        componentColor.parentNode.removeChild(componentColor);

        // delete it in list
        let index = listColorSelected.indexOf(colorId);
        listColorSelected.splice(index, 1);

        // delete it in list selected Color
        let selectElement = document.getElementsByClassName('select2-selection__choice');
        let infoColor;
        for (let i = 0; i < selectElement.length; i++) {
            infoColor = listColor.find((color) => color.cateName === selectElement[i].title);

            if(infoColor.cateId.toString() === colorId) {
                selectElement[i].remove();
                break;
            }
        }
        
        // unselected from select option component
        let selectOptions = document.getElementById('color-select');

        for (let i = 0; i < selectOptions.options.length; i++) {
            if(selectOptions.options[i].value === colorId) {
                selectOptions.options[i].selected = false;
                break;
            }
        }
    }
    
    // handle update   
    let buttonSubmit = document.getElementById("btnUpdate");

    buttonSubmit.addEventListener("click", function(event) {
        event.preventDefault();

        buttonSubmit.disabled = true;

        const form = document.getElementById("product-update-form");
        const formData = new FormData(form);

        if(formData.get('name') === '' || formData.get('introduce') === '' || formData.get('description') === '') {
            alert("Please fill out all common information of this shoe");
            buttonSubmit.disabled = false;
            return;
        }

        if(listColorSelected.length === 0) {
            alert("Please choose color, and fill out all info of this color");
            buttonSubmit.disabled = false;
            return;
        }

        let listInfoWithColor = [], isValid = false, isErr = false, checkAmount, checkPrice;

        listColor.forEach((color) => {
            listColorSelected.forEach((colorId) => {
                if(color.cateId === colorId) {
                    isValid = false;
                    const avatar = document.getElementsByName(`avatar${color.cateName}`);
                    const images = document.getElementsByName(`imageName${color.cateName}`);
                    const size = document.getElementsByName(`size${color.cateId}`);
                    const amountOfSize = document.getElementsByName(`amountOfSize${color.cateId}`);
                    const price = document.getElementsByName(`price${color.cateId}`);
                    const arrImg = document.getElementsByName(`arrImg${color.cateName}`);

                    if(avatar[0].value === '') {
                        alert(`Please choose image avatar for color: ${color.cateName}`);
                        buttonSubmit.disabled = false;
                        return;
                    }
                    
                    if(images.length === 0) {
                        alert(`Please choose images details for color: ${color.cateName}`);
                        buttonSubmit.disabled = false;
                        return;
                    }

                    // validate size and price of this color
                    for (let i = 0; i < amountOfSize.length; i++) {
                        checkAmount = parseInt(amountOfSize[i].value);
                        checkPrice = parseInt(price[i].value);

                        // Check if amount and price are filled and greater than 0
                        if (checkAmount > 0 && checkPrice > 0) {
                            console.log("test");
                            isValid = true;
                            break;
                        }
                    }

                    if (!isValid) {
                        alert(`Please fill in at least one amount and price of color: ${color.cateName.toUpperCase()}, and make sure they are greater than 0.`);
                        isErr = true;
                    }

                    const length = size.length;
                    let listSize = [], listImage = [];

                    images.forEach((image) => {
                        listImage.push(image.value);
                    });

                    for(let i = 0; i < length; i++) {
                        listSize.push({
                            sizeId: size[i].value,
                            amount: amountOfSize[i].value,
                            price: price[i].value,
                        });
                    }

                    listInfoWithColor.push({
                        colorId: color.cateId,
                        listImg: listImage,
                        listSize: listSize,
                        avatar: avatar[0]?.value,
                    });
                }
            });
        });

        if(isErr) {
            buttonSubmit.disabled = false;
            return;
        }

        // image list info and delete Image
        formData.append("listDeleteImg", JSON.stringify(listDeleteImg));
        formData.append("listImgWithColor", JSON.stringify(listInfoWithColor));

        fetch(`/admin/product/saveUpdate/${product._id}`, {
            method: "PUT",
            body: formData
        }).then((response) => {
            window.location.href = "/admin/product";
        }).catch((error) => {

        })
    });
</script>