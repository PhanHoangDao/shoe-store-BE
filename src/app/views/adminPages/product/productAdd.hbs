<div class="app-content content">
    <div class="content-wrapper">
        <div class="content-wrapper-before"></div>
        <div class="content-header row">
            <div class="content-header-left col-md-4 col-12 mb-2">
            <h3 class="content-header-title">Product</h3>
            </div>
            <div class="content-header-right col-md-8 col-12">
            <div class="breadcrumbs-top float-md-right">
                <div class="breadcrumb-wrapper mr-1">
                <ol class="breadcrumb">
                    {{!-- must automation this link --}}
                    <li class="breadcrumb-item"><a href="/admin">Home</a>
                    </li>
                    <li class="breadcrumb-item"><a href="/admin/product">Product</a>
                    </li>
                    <li class="breadcrumb-item active">Add Product
                    </li>
                </ol>
                </div>
            </div>
            </div>
        </div>
        <div class="content-body">
            <div class="row">
                <div class="col-12">
                    <form action="/admin/product/save" method="POST" enctype="multipart/form-data" id="product-add-form">
                        {{!-- Common info of shoe --}}
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Add Product</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                        <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                        <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="card-content collapse show">
                                {{!-- why have enctype and it's not work --}}
                                <div style="margin: 0 20px;">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Name</label>
                                        <input type="text" class="form-control" name="name" placeholder="Enter shoeName" required>
                                    </div>
                                    
                                    {{!-- Get all CateTyped added and category of this type --}}
                                    {{getAnotherCateAdded listCateType listAnotherCateAdded}}
                                    
                                    <div class="form-group" style="display: flex; flex-direction: column"> 
                                        <label for="exampleInputEmail1">Introduce of product</label>
                                        <textarea name="introduce" placeholder="Enter introduce for Shoe" required></textarea>
                                    </div>
                                    <div class="form-group" style="display: flex; flex-direction: column">
                                        <label for="exampleInputPassword1">Description</label>
                                        <textarea name="description" placeholder="Enter description for Shoe" required></textarea>
                                    </div>
                                    {{#if errImage}}
                                        <div class="alert alert-warning" role="alert">
                                            {{errImage}}
                                        </div>
                                    {{/if}}  
                                    <div class="form-group">
                                        <label for="exampleInputPassword1">Gender</label>
                                        <select name="gender" class="form-control" required>
                                            <option value="male">Male</option>
                                            <option value="female">Female</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {{!-- List to choose to render color of product --}}
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Choose Color</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                        <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                        {{!-- <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li> --}}
                                        <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                        {{!-- <li><a data-action="close"><i class="ft-x"></i></a></li> --}}
                                    </ul>
                                </div>
                            </div>

                            <div class="card-content collapse show">
                                {{!-- why have enctype and it's not work --}}
                                <div class="cart-body">
                                    <div style="margin: 0 20px;">
                                        <div class="form-group">
                                            <select class="select2 form-control" id="color-select" multiple style="margin-bottom: 20px" onchange="handleColorSelectedChange(event)">
                                                {{#each listColor}}
                                                    <option value="{{this.cateId}}">{{this.cateName}}</option>
                                                {{/each}}
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {{!-- Image and Size of Color Render when selected --}}
                        <div id="render-color-selected"></div>  

                        <button type="submit" class="btn btn-primary" id="btnAdd">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // list color with image and all elements of it
    let listColor = {{{json listColor}}};
    let listColorSelected = [];

    // list to render color component
    let listRenderSelectedColor = document.getElementById("render-color-selected");

    // on change color selected
    function handleColorSelectedChange(event) {
        let selectElement = document.getElementById('color-select');
        let selectedColors = [], option, elements;
        
        for (let i = 0; i < selectElement.options.length; i++) {
            option = selectElement.options[i];
            if (!option.selected || listColorSelected.find((color) => color === option.value)) {
                continue;
            }
            
            listColorSelected.push(option.value);

            listColor.forEach(color => {
                if(color.cateId === option.value) {
                    listRenderSelectedColor.insertAdjacentHTML("beforeend", 
                        `<div class="card" color-id="${color.cateId}">
                            <div class="card-header">
                                <h4 class="card-title">${color.cateName.charAt(0).toUpperCase() + color.cateName.slice(1)}</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                        <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                                        <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                                        <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                                        <li><a data-action="close" onclick="deleteComponentColor(event, '${color.cateId}')"><i class="ft-x"></i></a></li>
                                    </ul>
                                </div>
                            </div>

                            <div class="card-content collapse show" style="margin: 0 20px;">
                                <div id="imageFields${color.cateName}">                                    
                                    <div class="form-group imageField${color.cateName}">
                                        <label for="exampleInputPassword1">Image Avatar</label>
                                        <input type="file" class="form-control imageWithColor${color.cateName}" name="image" placeholder="Select image" accept='image/*' value="0" onclick="displayImg${color.cateName}(0)" required>
                                        <img class="imgEdit" name="imageChange${color.cateName}" src="" alt="Images of product" style="width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%; display: none">
                                        <input type="hidden" name="avatar${color.cateName}">
                                    </div>
                                    <div class="form-group imageField${color.cateName}">
                                        <label for="exampleInputPassword1">Images Details</label>
                                        <input type="file" class="form-control imageWithColor${color.cateName}" name="image" id="image" value="1" onclick="displayImg${color.cateName}(1)" multiple required>
                                    </div>
                                </div>

                                {{!-- Size and price of each size and color --}}
                                <div class="form-group">
                                    <label for="exampleInputPassword1">Sizes in US/UK (Enter the amount of the shoes)</label>
                                    {{#each listSizeAdded}}
                                        <div class="form-check" style="margin-bottom: 14px">
                                            <input value="{{this.cateId}}" name="size${color.cateId}" type="hidden">
                                            <label class="form-check-label" for="flexCheckDefault" style="margin-right: 50px; min-width: 30px">
                                                {{this.cateName}}
                                            </label>
                                            <input type="number" name="amountOfSize${color.cateId}" placeholder="Enter amount of this size" value="0" min="0">
                                            <label class="form-check-label" for="flexCheckDefault" style="margin-right: 10px; margin-left: 20px; min-width: 30px">Price</label>
                                            <input type="number" name="price${color.cateId}" placeholder="Enter price of this size" value="0" min="0">
                                        </div> 
                                    {{/each}}
                                </div> 
                            </div>
                        </div>`
                    );

                    window["imageField" + color.cateName] = document.getElementsByClassName(`imageField${color.cateName}`);

                    // function to display image when update or add
                    const displayName = `displayImg${color.cateName}`;
                    window[displayName] = new Function(`
                        return function ${displayName}(position) {
                            window["selectedFile${color.cateName}"] = document.getElementsByClassName("imageWithColor${color.cateName}");

                            window["selectedFile${color.cateName}"][position].addEventListener('change', (event) => {
                                if(position === 0) {
                                    let srcImage = document.getElementsByName("imageChange${color.cateName}");
                                    // display new image when have update (avatar).
                                    srcImage[position].src = URL.createObjectURL(event.target.files[0]);
                                    srcImage[position].onload = function() {
                                        URL.revokeObjectURL(srcImage[position].src) // free memory
                                    }
                                    srcImage[position].style = "width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;";
                                    // assign value for input avatar
                                    let inputAvatar = document.getElementsByName("avatar${color.cateName}");
                                    inputAvatar[0].value = event.target.files[0].name;
                                    return;
                                }
                                
                                // reset image element 
                                let elements = document.querySelectorAll(".image-element-${color.cateName}");
                                elements?.forEach(function(element) {
                                    element.remove();
                                });
                                
                                // display new image when have update (image detail).
                                Array.from(event.target.files).forEach((file) => {
                                    let img = document.createElement('img');
                                    let input = document.createElement('input');
                                    let div = document.createElement('div');

                                    // CSS for div element image
                                    div.style="position: relative";
                                    div.className="image-element-${color.cateName}";

                                    // delete icon 
                                    let divDeleteIcon = document.createElement('div');
                                    divDeleteIcon.style = 'position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0; transition: opacity 0.3s ease; cursor: pointer;';
                                    let trashIcon = document.createElement('i');
                                    trashIcon.className = 'fa ft-trash';
                                    trashIcon.style="font-size: 20px; color: white";

                                    // event to delete image element
                                    trashIcon.addEventListener('click', deleteImage);
                                    divDeleteIcon.appendChild(trashIcon);

                                    div.appendChild(img);
                                    div.appendChild(input);
                                    div.appendChild(divDeleteIcon);

                                    // set attribute for tag input
                                    input.setAttribute('type', 'hidden');
                                    input.setAttribute('value', file.name);
                                    // set avatar or list image for shoe
                                    input.setAttribute('name', 'imageName${color.cateName}');
  
                                    // Set attributes for tag image
                                    img.src = URL.createObjectURL(file);
                                    img.style = "width: 25%;max-height: 310px;margin: 0.5% 37.5%; min-height: 105px; min-width: 10%;";

                                    // event hover
                                    div.addEventListener('mouseenter', function() {
                                        divDeleteIcon.style.opacity = '1';
                                        img.style.opacity = '0.5';
                                    })
                                    div.addEventListener('mouseleave', function() {
                                        divDeleteIcon.style.opacity = '0';
                                        img.style.opacity = '1';
                                    })
                                    
                                    // Append the img element to the image container
                                    window["imageField${color.cateName}"][position].appendChild(div);

                                    // free memory
                                    img.onload = function() {
                                        URL.revokeObjectURL(img.src);
                                    }
                                });
                            }); 
                        }`)();
                }
            });
        }

        // delete it in list Selected color to render
        const selectedValues = Array.from(event.target.selectedOptions, option => option.value);
        listColorSelected.forEach((color) => {
            if(!selectedValues.includes(color)) {
                let index = listColorSelected.indexOf(color);
                listColorSelected.splice(index, 1);

                let elementToDelete = document.querySelector(`[color-id="${color}"]`);
                if(elementToDelete) {
                    elementToDelete.remove();
                }
            }
        })
    }

    let listDeleteImg = [];

    function deleteImage(event) {
        // image element
        let imageElement = event.target.parentNode.parentNode;
        let imgDelete = imageElement.querySelector("input");

        // get list value of delete image.
        const oldImageInput = imageElement.parentNode.querySelector('input');

        Array.from(oldImageInput.files).forEach((file) => {
            if(file.name === imgDelete.value) {
                listDeleteImg.push(file.name);
            }
        });

        // remove on interface
        imageElement.parentNode.removeChild(imageElement);
    }

    function deleteComponentColor(event, colorId) {
        let componentColor = event.target.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
        componentColor.parentNode.removeChild(componentColor);

        // delete it in list
        listColorSelected.splice(colorId, 1);

        // delete it in list selected Color
        let selectElement = document.getElementsByClassName('select2-selection__choice');
        let infoColor;
        for (let i = 0; i < selectElement.length; i++) {
            infoColor = listColor.find((color) => color.cateName === selectElement[i].title);

            if(infoColor.cateId.toString() === colorId) {
                selectElement[i].remove();
                break;
            }
        }
        
        // unselected from select option component
        let selectOptions = document.getElementById('color-select');

        for (let i = 0; i < selectOptions.options.length; i++) {
            if(selectOptions.options[i].value === colorId) {
                selectOptions.options[i].selected = false;
                break;
            }
        }
    }

    let buttonSubmit = document.getElementById("btnAdd");

    buttonSubmit.addEventListener("click", function(event) {
        event.preventDefault();

        buttonSubmit.disabled = true;

        const form = document.getElementById("product-add-form");
        const formData = new FormData(form);

        if(formData.get('name') === '' || formData.get('introduce') === '' || formData.get('description') === '') {
            alert("Please fill out all common information of this shoe");
            buttonSubmit.disabled = false;
            return;
        }

        if(listColorSelected.length === 0) {
            alert("Please choose color, and fill out all info of this color");
            buttonSubmit.disabled = false;
            return;
        }

        let listInfoWithColor = [], isValid = false, isErr = false, checkAmount, checkPrice;

        listColor.forEach((color) => {
            listColorSelected.forEach((colorId) => {
                if(color.cateId === colorId) {
                    isValid = false;
                    const avatar = document.getElementsByName(`avatar${color.cateName}`);
                    const images = document.getElementsByName(`imageName${color.cateName}`);
                    const size = document.getElementsByName(`size${color.cateId}`);
                    const amountOfSize = document.getElementsByName(`amountOfSize${color.cateId}`);
                    const price = document.getElementsByName(`price${color.cateId}`);

                    if(avatar[0].value === '') {
                        alert(`Please choose image avatar for color: ${color.cateName}`);
                        buttonSubmit.disabled = false;
                        return;
                    }

                    if(images.length === 0) {
                        alert(`Please choose images details for color: ${color.cateName}`);
                        buttonSubmit.disabled = false;
                        return;
                    }

                    // validate size and price of this color
                    for (let i = 0; i < amountOfSize.length; i++) {
                        checkAmount = parseInt(amountOfSize[i].value);
                        checkPrice = parseInt(price[i].value);

                        // Check if amount and price are filled and greater than 0
                        if (checkAmount > 0 && checkPrice > 0) {
                            isValid = true;
                            break;
                        }
                    }

                    if (!isValid) {
                        alert(`Please fill in at least one amount and price of color: ${color.cateName.toUpperCase()}, and make sure they are greater than 0.`);
                        isErr = true;
                    }

                    const length = size.length;
                    let listSize = [], listImage = [];

                    images.forEach((image) => {
                        listImage.push(image.value);
                    });

                    for(let i = 0; i < length; i++) {
                        if(amountOfSize[i].value > 0 && price[i].value > 0) {
                            listSize.push({
                                sizeId: size[i].value,
                                amount: amountOfSize[i].value,
                                price: price[i].value,
                            });
                        }
                    }

                    listInfoWithColor.push({
                        colorId: color.cateId,
                        listImg: listImage,
                        listSize: listSize,
                        avatar: avatar[0]?.value,
                    });
                }
            });
        });

        if(isErr) {
            buttonSubmit.disabled = false;
            return;
        }

        // image list info and delete Image
        formData.append("listDeleteImg", JSON.stringify(listDeleteImg));
        formData.append("listImgWithColor", JSON.stringify(listInfoWithColor));

        fetch("/admin/product/save", {
            method: "POST",
            body: formData
        }).then((response) => {
            window.location.href = "/admin/product";
        }).catch((error) => {

        })
    });
</script>